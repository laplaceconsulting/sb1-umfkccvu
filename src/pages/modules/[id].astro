---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';

const { id } = Astro.params;

// Fetch module data
const { data: module } = await supabase
  .from('modules')
  .select('*')
  .eq('id', id)
  .single();

if (!module) {
  return Astro.redirect('/404');
}

// Extract video ID from Vimeo URL if present
let videoId = null;
if (module.vimeo_url) {
  const match = module.vimeo_url.match(/(?:vimeo.com\/|player.vimeo.com\/video\/)(\d+)/i);
  if (match && match[1]) {
    videoId = match[1];
  }
}

// Fetch resources
const { data: resources } = await supabase
  .from('resources')
  .select('*')
  .eq('module_id', id)
  .order('created_at');

// Get user role
const { data: { user } } = await supabase.auth.getUser();
const { data: profile } = await supabase
  .from('profiles')
  .select('role')
  .eq('id', user?.id)
  .single();

const isAdmin = profile?.role === 'admin';

// Fetch comments with user profiles
const { data: comments } = await supabase
  .from('comments')
  .select(`
    *,
    profiles (
      role
    )
  `)
  .eq('module_id', id)
  .order('created_at', { ascending: false });

// Handle comment submission
let errorMessage = '';
let successMessage = '';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action')?.toString();

    if (action === 'delete') {
      // Delete comment
      const commentId = formData.get('commentId')?.toString();
      if (!commentId) throw new Error('Comment ID is required');

      const comment = comments?.find(c => c.id === commentId);
      if (!comment) throw new Error('Comment not found');

      // Check if user can delete the comment
      if (!isAdmin && comment.user_id !== user?.id) {
        throw new Error('Unauthorized');
      }

      const { error } = await supabase
        .from('comments')
        .delete()
        .eq('id', commentId);

      if (error) throw error;
      return Astro.redirect(`/modules/${id}`);
    } else {
      // Add new comment
      if (!user) throw new Error('Must be logged in to comment');

      const content = formData.get('content')?.toString().trim();
      if (!content) throw new Error('Comment content is required');

      const { error } = await supabase
        .from('comments')
        .insert({
          module_id: id,
          user_id: user.id,
          content
        });

      if (error) throw error;
      return Astro.redirect(`/modules/${id}`);
    }
  } catch (err) {
    console.error('Error:', err);
    errorMessage = err instanceof Error ? err.message : 'Erro ao processar sua solicitação';
  }
}
---

<Layout title={module.title}>
  <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
      <a href="/" class="inline-flex items-center text-blue-600 hover:text-blue-800">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Voltar para Página Principal
      </a>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="p-6">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">{module.title}</h1>
        
        {module.description && (
          <p class="text-gray-600 mb-6">{module.description}</p>
        )}

        {videoId && (
          <div class="aspect-w-16 aspect-h-9 mb-8">
            <iframe
              src={`https://player.vimeo.com/video/${videoId}?h=00000000&badge=0&autopause=0&player_id=0&app_id=58479`}
              frameborder="0"
              allow="autoplay; fullscreen; picture-in-picture"
              allowfullscreen
              class="w-full h-full rounded-lg"
              title={module.title}
            ></iframe>
          </div>
        )}

        {resources && resources.length > 0 && (
          <div class="mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Recursos Adicionais</h2>
            <div class="grid gap-4">
              {resources.map((resource) => (
                <a
                  href={resource.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100"
                >
                  <span class="text-blue-600 font-medium">{resource.title}</span>
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              ))}
            </div>
          </div>
        )}

        <div class="border-t pt-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Comentários</h2>

          {errorMessage && (
            <div class="mb-4 p-4 bg-red-50 border border-red-200 text-red-600 rounded-md">
              {errorMessage}
            </div>
          )}
          
          {user ? (
            <form method="POST" class="mb-8">
              <div>
                <label for="content" class="block text-sm font-medium text-gray-700">
                  Deixe seu comentário
                </label>
                <textarea
                  name="content"
                  id="content"
                  rows="3"
                  required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="O que você achou deste módulo?"
                ></textarea>
              </div>
              <div class="mt-3">
                <button
                  type="submit"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Comentar
                </button>
              </div>
            </form>
          ) : (
            <div class="mb-8 p-4 bg-gray-50 rounded-lg text-center">
              <p class="text-gray-600">
                <a href="/login" class="text-blue-600 hover:text-blue-800">Entre na sua conta</a>
                {' '}para deixar um comentário
              </p>
            </div>
          )}

          <div class="space-y-6">
            {comments?.map((comment) => (
              <div class="bg-gray-50 rounded-lg p-4">
                <div class="flex justify-between items-start mb-2">
                  <div class="text-sm text-gray-500">
                    {new Date(comment.created_at).toLocaleDateString('pt-BR', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                    {comment.profiles?.role === 'admin' && (
                      <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        Admin
                      </span>
                    )}
                  </div>
                  {(isAdmin || user?.id === comment.user_id) && (
                    <form method="POST" class="inline">
                      <input type="hidden" name="action" value="delete" />
                      <input type="hidden" name="commentId" value={comment.id} />
                      <button
                        type="submit"
                        class="text-red-600 hover:text-red-900 text-sm"
                        onclick="return confirm('Tem certeza que deseja excluir este comentário?')"
                      >
                        Excluir
                      </button>
                    </form>
                  )}
                </div>
                <p class="text-gray-900 whitespace-pre-wrap">{comment.content}</p>
              </div>
            ))}

            {(!comments || comments.length === 0) && (
              <p class="text-center text-gray-500">
                Nenhum comentário ainda. Seja o primeiro a comentar!
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>